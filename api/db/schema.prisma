datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model AccountCredential {
  id         String  @id
  accountId     Int
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Account {
  id                      Int                 @id @default(autoincrement())
  // Fields for web-based Scrapbook users
  email                   String?             @unique
  hashedPassword          String?
  salt                    String?
  resetToken              String?
  resetTokenExpiresAt     DateTime?
  webAuthnChallenge       String?             @unique
  credentials             AccountCredential[]
  clubs                   ClubMember[]
  // Fields for Slack-based Scrapbook users
  slackID                 String?             @unique
  // Fields for all Scrapbook users
  username                String              @unique @default(uuid())
  timezone                String              @default("Factory")
  timezoneOffset          Int                 @default(0)
  // Optional fields for all Scrapbook users
  streakCount             Int?
  maxStreaks              Int?
  displayStreak           Boolean?
  streaksToggledOff       Boolean?
  customDomain            String?
  cssURL                  String?
  website                 String?
  github                  String?
  fullSlackMember         Boolean?
  avatar                  String?
  webring                 String[]
  pronouns                String?
  customAudioURL          String?
  lastUsernameUpdatedTime DateTime?
  webhookURL              String?
  updates                 Update[]
  // Deprectated old fields for cross-compatibility.
  newMember               Boolean?
}

model Update {
  id               String      @id @default(cuid())
  accountID       Int?
  postTime         DateTime?   @default(now())
  text             String?
  attachments      String[]
  muxAssetIDs      String[]
  muxPlaybackIDs   String[]
  muxAssetStatuses String?
  messageTimestamp Float?
  backupAssetID    String?
  backupPlaybackID String?
  isLargeVideo     Boolean?
  channel          String?
  clubscrapID      String?     @unique
  account         Account?    @relation(fields: [accountID], references: [id], onDelete: Cascade)
  reactions        Reaction[]
  associatedClub   ClubUpdate?
}

model Emoji {
  id        String     @id @default(cuid())
  name      String     @unique(map: "Emoji.name_unique")
  source    String?
  reactions Reaction[]
}

model Reaction {
  id           String   @id @default(cuid())
  updateId     String?
  emojiName    String?
  accountsReacted Int[]
  updatedAt    DateTime @default(now()) @map("created_at")
  emoji        Emoji?   @relation(fields: [emojiName], references: [name], onDelete: Cascade)
  update       Update?  @relation(fields: [updateId], references: [id], onDelete: Cascade)
}

model ClubMember {
  id     String  @id @default(cuid())
  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  clubId String
  club   Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)
  admin  Boolean @default(false)
}

model ClubUpdate {
  id       String @id @default(cuid())
  updateId String @unique
  update   Update @relation(fields: [updateId], references: [id], onDelete: Cascade)
  clubId   String
  club     Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model Club {
  id           String       @id @default(cuid())
  slug         String       @unique
  name         String
  logo         String
  customDomain String?
  cssURL       String?
  website      String?
  github       String?
  members      ClubMember[]
  updates      ClubUpdate[]
}
