// This needs to be synced with hackclub/scrappy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  slackID                 String    @unique(map: "Accounts.slackID_unique")
  email                   String?   @unique(map: "Accounts.email_unique")
  username                String    @unique(map: "Accounts.username_unique")
  streakCount             Int?
  maxStreaks              Int?
  displayStreak           Boolean?
  streaksToggledOff       Boolean?
  customDomain            String?
  cssURL                  String?
  website                 String?
  github                  String?
  fullSlackMember         Boolean?
  avatar                  String?
  webring                 String[]
  newMember               Boolean
  timezoneOffset          Int
  timezone                String
  pronouns                String?
  customAudioURL          String?
  lastUsernameUpdatedTime DateTime?
  webhookURL              String?
  updates                 Updates[]
  tokens                  Token[]
}

model Updates {
  id               String           @id @default(cuid())
  accountsSlackID  String?
  postTime         DateTime?
  text             String?
  attachments      String[]
  muxAssetIDs      String[]
  muxPlaybackIDs   String[]
  muxAssetStatuses String?
  messageTimestamp Float?
  backupAssetID    String?
  backupPlaybackID String?
  isLargeVideo     Boolean?
  channel          String?
  clubscrapID      String?          @unique
  Accounts         Accounts?        @relation(fields: [accountsSlackID], references: [slackID])
  clubscrap        Clubscraps?      @relation(fields: [clubscrapID], references: [id])
  emojiReactions   EmojiReactions[]
}

model EmojiType {
  name           String           @unique(map: "EmojiType.name_unique")
  emojiSource    String?
  emojiReactions EmojiReactions[]
}

model EmojiReactions {
  id            String     @id @default(cuid())
  updateId      String?
  emojiTypeName String?
  usersReacted  String[]
  updatedAt     DateTime   @default(now()) @map("created_at")
  EmojiType     EmojiType? @relation(fields: [emojiTypeName], references: [name])
  update        Updates?   @relation(fields: [updateId], references: [id])
}

model Clubscraps {
  id          String   @id @default(cuid())
  createdAt   DateTime
  description String
  name        String
  email       String
  club        String?
  timestamp   Float    @unique
  update      Updates?
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userEmail String
  user      Accounts     @relation(fields: [userEmail], references: [email])
}